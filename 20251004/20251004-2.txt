# 자바스크립트 기초 - 14강 배열
    - 배열이란 순서가 있는 요소들의 집합, 여러개의 데이터가 모여있는 리스트라고 할 수 있다. 
    1. 배열 생성
    생성자 함수나 리터럴 함수를 사용하여 생성
        1) 생성자 함수 Array()
            new 키워드와 함께 원하는 값을 배열에 지정
            let arr=new Array(1,2,3);
            console.log(arr) ->[1,2,3] 츌력
            
            원하는 공간의 크기 작성
            let arr=new Array(3);
            console.log(arr) -> [비어 있음 x 3] 출력
            빈 값이 3개 할당되었다.
        2) 배열 리터럴 []
            배열 리터럴은 숫자를 하나만 써도 원하는 값이 배열에 저장된다.
            let arr1=[1,2,3];
            let arr2=[3]; 
    2. 배열에 값 추가/삭제/수정
    key값 대신 index 로 배열 요소에 접근 가능.
        1) 추가: push 메소드
            배열이름.push('추가할 값');
            -> 배열 맨 뒤에 값이 추가된다.
        2) 추가: unshift 메소드
            -> 배열 맨 앞에 값이 추가된다.
        3) 수정: 인덱스로 접근후 할당
            arr[1]='수정할 값';
        4) 삭제: pop 메소드
            arr.pop();
            -> 가장 마지막 요소가 삭제된다. 
        5) 삭제: splice(start, delete)
            arr.splice(0, 2)
            -> 0번인덱스부터 2개 삭제한다.

# 자바스크립트 기초 - 15강 생성자 함수
생성자 함수는 일반적으로 같은 구조를 갖는 여러개의 객체를 쉽게 생성하기 위해 사용된다.
    function person(name, age, job){
        this.name=name,
        this.age=age,
        tis.job=job',
        this.sayHi=function (){
            console.log(`안녕하세요 저는' + this.name + '입니다');
        }
    }
        
    const person1=new person('박유빈',22,'학생');
    person1.sayHi();

생성자 함수를 통해 새로 생성한 객체를 인스턴스라고 한다.
생성자 함수는 반복되는 코드 작성을 감소시킨다. 

# 자바스크립트 기초 - 16강 반복문
생략
Object.keys(객체 이름) -> 해당 객체의 key 값들을 배열로 변환한다.
Object.values(객체 이름) -> 해당 객체의 value 값들을 배열로 변환한다.
Object.entries(객체 이름) -> 해당 객체의 key와 value를 새로운 배열에 담아 그것들을 배열로 변환한다.

알아두면 유용한 자바스크립트의 다른 반복문

    1. for of 
        배열의 모든 요소들에 접근해야할 떄 사용
        let arr = [1,2,3,4,5];

        for(let i of arr){
            console.log(i);
        }
        -> 순서대로 모든 요소 출력

    2. for in
        객체의 모든 프로퍼티들을 바로 순회할 수 있게 도와줌.
        let person ={
            name: '박유빈',
            age: 22,
            height: 157
        };

        for (let key in person){
            console.log(`key ${key}, value: ${person[key]}`);
        }
        -> 모든 key 와 value 출력 

# 자바스크립트 기초 - 17강 배열메소드-1

    배열을 순회할 수 있는 내장함수들
        1. forEach() 

            forEach()에 넘겨줄 수 있는 매개변수: 
            1. elm 요소
                let arr=[1,2,3,4,5];

                arr.forEach((elm)=>{
                    console.log(elm);
                });

                -> 모든 요소 출력

            2. idx 인덱스 
                let arr=[1,2,3,4,5];

                arr.forEach((elm, idx)=>{
                    console.log(`${idx} 번째 요소는 ${elm}입니다.`);
                });

            3. array 
                let arr=[1,2,3,4,5];

                arr.forEach((elm, idx, array)=>{
                    console.log(array);
                });

                -> 실제 arr 배열 그 자체 출력
                -> 배열의 요소 갯수만큼 출력한다.
            
            2. map()
                전달한 callback함수를 호출한 결과를 모아서 새로운 배열로 반환해주는 내장함수.
                배열의 모든 요소에 연산을 적용하고, 그 결과를 새로운 배열로 받는다. 
                매개변수로 forEach()와 같은 3가지를 받을 수 있다.

                let arr=[1,2,3,4,5];

                let newArray=[];
                for(let i=0; i<arr.length; i++){
                    newArray.push(arr[i]*10);   
                }
            
                console.log(newArray);
                -> arr의 각 요소에 10씩 곱한 값들로 만든 배열 전체 출력

                -> map()을 통해서 더 편리하게 바꾸자. 
                
                let newArray=arr.map((elm)=>{
                    return elm *10;
                });
                console.log(newArray);
                -> arr의 각 요소에 10씩 곱한 값들로 만든 배열 전체 출력
        
    배열에서 특정 값을 찾을 수 있는 내장함수

        1. at()
            let colors=['green','blue','purple'];
            console.log(colors.at(1));

            -> 1번째 인덱스의 요소를 반환

            console.log(colors.at(-1));
            
            -> 배열의 마지막 요소를 반환
        
        2. includes()
            지정한 값을 가지고 있으면 true, 없으면 false 반환

            let colors=['green','blue','purple'];
            console.log(colors.includes('yellow'));
            -> false 출력

            console.log(colors.includes('blue', 1));
            -> 1번 인덱스부터 값을 찾는다. 
        
        3. indexOf()
            특정 값을 지닌 요소가 몇번째 인덱스인지 찾아준다.

            let colors=['green','blue','purple'];
            console.log(colors.indexOf('purple'));
            -> 2 출력

            만약 배열에 존재하지 않는 값을 찾으려고 하면 -1을 반환한다.

            indexOf()는 배열 요소의 값이 객체 형태이거나 배열의 형태일 떄의 인덱스는 찾아주지 못한다. 
            -> findIndex()

        4. findIndex()
            indexOf()는 배열 요소의 값이 객체 형태이거나 배열의 형태일 떄의 인덱스는 찾아주지 못한다. 이런 경우 findIndex()를 사용한다.

            전달할 수 있는 매개변수의 종류는 같다.

            let colors=[
                {id:1, color:'green'},
                {id:2, color:'blue'},
                {id:3, color:'purple'}
            ];
            
            let idx = colors.findIndex((elm)=>elm.color==='purple');
            console.log(idx);
            -> idx에 color가 purple인 요소의 인덱스 저장된다
            -> 2반환
        5. find()
            찾아낸 값의 인덱스가 아닌 찾아낸 값 자체를 반환한다. 
            
            let idx=colors.find((elm)=>elm.color==='purple');
            console.log(idx);
            ->{id: 3, color: 'purple'} 출력

            만약 배열에서 값을 찾지 못하면 undefined 를 반환한다. 
    
    배열에서 특정 요소를 추출할 수 있는 내장함수

        1. filter()
            배열에서 특정 조건을 만족하는 값들만 따로 추출해서 새로운 배열을 만들어 반환한다.

            let fillterArray =colors.filter((elm, idx, array)=>elm.id>1)
            console.log(fillterArray);
            -> id가 1보다 큰 모든 요소를 새로운 배열에 담아서 출력한다. 
        
        2. slice()
            특정 값만 추출해 배열로 반환하는 또다른 함수.

            매개변수로 begin과 end를 전달받는다. 
            begin부터 end-1 번째 인덱스까지에서 값아 새로운 배열로 변환한다.

             let colors=[
                {id:1, color:'green'},
                {id:2, color:'blue'},
                {id:3, color:'purple'}
                {id:4, color:'yellow'}
            
            ];
                        
            let sliceArray = colors.slice(1,3);

# 자바스크립트 기초 - 배열 메서드-2
 
    배열을 이어 붙이는 함수
        1. concat()
        두 개의 배열을 이어붙일 수 있다.

        let array1=['green','blue'];
        let array2=['purple','yellow'];

        console.log(array1.concat(array2));
        -> 두 배열을 이어붙인 새로운 배열 출력

        2. join()
        한 배열의 값들을 문자열로 이어붙여줌.

        join()의 매개변수는 값들을 구분하는 구분자. 아무것도 입력하지 않으면 콤마로 구분되고, 공백을 넣으면 green blue purple yellow와 같이 반환된다.
        
        console.log(array1.join());
        -> green,blue,purple,yellow 출력

    배열을 정렬하는 함수
        1. sort()
        함수를 정렬한다.
        매개변수로 함수를 받을 수 있다. 

        let array1=['green','blue','purple'];
        
        colors.sort();
        console.log(colors);
        -> 알파벳순으로 정렬된 배열을 출력한다. 

        원하는 비교 함수(compare())를 제작하여 메서드에 전달하면 원하는 순서대로 정렬할 수있다. 
        내림차순 정렬 하는법 .

        a: 배열의 다음요소
        b: a의 이전요소

        const compare = (a,b)=>{
            if(a>b) return -1;  
            else if (a<b) return 1;  
            else return 0;
        }

        sort 는 반환값이 -1이면 a가 b보다 앞에 있어야한다고 해석. (큰 값이 앞으로 가게 만든다)
        반환값이 1이면 a가 b보다 뒤에 있어야한다고 해석.

        colors.sort(compare());
        console.log(colors);
        -> 내림차순으로 정렬된 함수 출력
    
    다른 내장 함수

        1. reduce()
        callback 함수와 initialValue 라는 초기값을 받는다
        callback 함수의 매개변수로는 accumulator, currentvalue, currentIndex 세가지이다.
        acc : 콜백 함수의 반환값을 누적하는 매개변수
        cur: 현재처리할 요소의 값
        int: cur 의 인덱스값

        let numbers=[1,100,25,50];
        let sum =numbers.reduce((acc,cur,idx)=>{
            console.log(acc,cur,idx);
            return acc + cur;
        },0);

        console.log(sum);
        -> 
            0 1 0
            1 100 1
            101 25 2
            126 50 3
            176
            출력한다


        2. isArray()
        전달된 매개변수가 배열인지 아닌지 판별한다

        let a=Array.isArray([1,100,50]);
        let b=Array.isArray({id:1, color:'green'});
        let c=Array.isArray('string');
        let d=Array.isArray(undefined);

        console.log(a,b,c,d);

        -> true, false, false, false

# 자바스크립트 기초 - 19강 배열과 객체 구조 분해 할당
배열이나 객체의 요소 및 프로퍼티를 분해해서 각각의 변수에 할당하는 표현식을 말한다. 
배열이나 객체 안에 있는 요소를 쉽고 편하게 추출할 수 있다. 

    배열의 구조분해 할당

        let colors=['green','blue','purple';];

        let c1 = colors[0];
        let c2 = colors[1];
        let c3 = colors[2];

        위와 같은 절차를 구조 분해 할당으로 간편하게 처리할 수 있다.

        let colors=['green','blue','purple'];
        let [c1, c2, c3]= colors;

        더 간단한 작성법

        let c1, c2, c3;
        [c1,c2,c3]=['green','blue','purple'];


    배열의 길이보다 더많거나 적은 값의 변수 할당
        let c1, c2;
        [c1,c2]=['green','blue','purple'];

        -> 앞부터 순서대로 할당된다.

        let c1, c2, c3, c4;
        [c1,c2,c3,c4]=['green','blue','purple'];

        -> c4에는 undefined가 할당된다.

        undefined가 싫다면 기본값을 설정해주면 된다. (기본값 할당)

        let c1, c2, c3, c4;
        [c1,c2,c3,c4='yellow']=['green','blue','purple'];

        기본값 할당은 두 변수의 값을 교환할 때 사용되기도 한다. 

        [a,b]=[b,a];

    객체의 구조분해 할당
        객체의 구조분해 할당은 인덱스가 아닌 키 값을 기준으로 객체를 분해하여 할당한다는 차이점이 있다.

        let colors={
            c1:'green',
            c2:'blue',
            c3: 'purple'
        }

        키 값과 이름이 다른 변수에 할당할 때는 클론을 이용해 할당할 수 있다.
        let { c1: color1, c2: color2, c3: color3} = colors;

# 자바스크립트 기초 -20강 spread 와 rest 
spread: 배열의 요소나 객체의 프로퍼티 값을 펼치는 역할을 한다. ...로 나타낸다

    const toy={
        type: 'bear',
        price: 15000
    };

    const blueToy ={
        ...toy,
        color: 'blue'
    };
    const yellowToy ={
        ...toy,
        color: 'yellow'
    };
        
    -> toy가 가진 프로퍼티를 다른 객체에 펼쳐준다. (추가해준다)
    -> 배열에서도 사용할 수 있다. 
    -> 순서에 상관없이 여러번 작성할 수 있다.

rest: 나머지 매개변수. 특정 부분을 하나의 배열이나 객체로 묶어주는 문법. ...로 나타낸다.

     const blueToy ={
        type: 'bear',
        price: 15000,
        color: 'blue'
    };
     
    const {type, price, color} = blueToy;

    rest 문법을 통해 price와 color를 묶어서 나타낼 수 있다. 

    const {type, ...rest} = blueToy;
    
    -> spread와 다르게 항상 맨 마지막에 작성해야하고 여러번 작성할 수 없다. 
    -> 배열에서도 사용할 수 있다.


            

